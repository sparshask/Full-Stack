<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap');

        body {
            font-family: 'Poppins', sans-serif;
            background: rgba(249, 187, 230);
            display: flex;
            justify-content: center;
        }

        .container {
            width: 450px;
            padding: 20px;
            margin-top: 80px;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 20px;
        }

        h1 {
            text-align: center;
        }

        .question {
            font-weight: bold;
            margin-bottom: 10px;
        }

        .options {
            margin-bottom: 20px;
        }

        .option {
            display: block;
            margin-bottom: 10px;
        }

        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #428bca;
            color: #fff;
            border: none;
            cursor: pointer;
            font-size: 16px;
            border-radius: 4px;
            transition: background-color 0.3s;
            margin-right: 10px;
        }

        .button:hover {
            background-color: #3071a9;
        }

        .result {
            text-align: center;
            margin-top: 20px;
            font-weight: bold;
        }

        .hide {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Quiz</h1>
        <div id="quiz"></div>
        <div id="result" class="result"></div>
        <button id="submit" class="button">Submit</button>
        <button id="retry" class="button hide">Retry</button>
        <button id="showAnswer" class="button hide">Show Answer</button>
    </div>

    <script>
        const quizData = [
            {
                question: 'Q1.What is the primary focus of “Rhyme Time?',
                options: ['Exploring word families', 'Understanding phonetic play', 'Creating rhythmic patterns in language', 'Studying syntactic voyages'],
                answer: 'Creating rhythmic patterns in language',
            },
            {
                question: 'Q2.Which literary device is prominently highlighted in “Rhyme Time”?',
                options: ['Alliteration', 'Metaphor', 'Simile', 'Onomatopoeia'],
                answer: 'Alliteration',
            },
            {
                question: 'Q3.What role do adjectives and adverbs play in “Word Family Adventures”?',
                options: ['Describing characters', 'Propelling the action', 'Enhancing the imagery', 'Anchoring the narrative'],
                answer: 'Enhancing the imagery',
            },
            {
                question: 'Q4.What analogy is drawn between words in “Word Family Adventures”',
                options: ['Synonyms as siblings', 'Verbs as protagonists', 'Nouns as anchors', 'Antonyms as counterparts'],
                answer: 'Synonyms as siblings',
            },
            {
                question: 'Q5.What educational purpose does “Phonics Play Party” serve?',
                options: [
                    'Encouraging rote learning',
                    'Fostering a love for language',
                    'Developing mathematical skills',
                    'Enhancing motor skills',
                ],
                answer: 'Fostering a love for language',
            },
            {
                question: 'Q6.How are phonetic landscapes described in “Phonics Play Party”?',
                options: ['Static and unchanging', 'Multidimensional and dynamic', 'Linear and predictable', 'Isolated and fragmented'],
                answer: 'Multidimensional and dynamic',
            },
            {
                question: 'Q7.Which statement best describes the content of “Rhyme Time”?',
                options: [
                    'Exploring word families through play',
                    'Understanding phonetic patterns in language',
                    'Enhancing vocabulary through storytelling',
                    'Developing literacy skills through repetition',
                ],
                answer: 'Understanding phonetic patterns in language',
            },
            {
                question: 'Q8.What aspect of language acquisition is emphasized in “Word Family Adventures”?',
                options: ['Phonetic discovery', 'Syntactic exploration', 'Morphological analysis', 'Semantic integration'],
                answer: 'Phonetic discovery',
            },
            {
                question: 'Q9.What distinguishes the narrative style in “Rhyme Time” from “Word Family Adventures”?',
                options: [
                    'Rhyming patterns',
                    'Descriptive language',
                    'Emotional depth',
                    'Genre conventions',
                ],
                answer: 'Rhyming patterns',
            },
            {
                question: 'Q10.Which section of the module focuses on interactive learning experiences?',
                options: ['Rhyme Time', 'Word Family Adventures', 'Phonics Play Party', 'None of the above'],
                answer: 'Phonics Play Party',
            },
        ];

        const quizContainer = document.getElementById('quiz');
        const resultContainer = document.getElementById('result');
        const submitButton = document.getElementById('submit');
        const retryButton = document.getElementById('retry');
        const showAnswerButton = document.getElementById('showAnswer');

        let currentQuestion = 0;
        let score = 0;
        let incorrectAnswers = [];

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function displayQuestion() {
            const questionData = quizData[currentQuestion];

            const questionElement = document.createElement('div');
            questionElement.className = 'question';
            questionElement.innerHTML = questionData.question;

            const optionsElement = document.createElement('div');
            optionsElement.className = 'options';

            const shuffledOptions = [...questionData.options];
            shuffleArray(shuffledOptions);

            for (let i = 0; i < shuffledOptions.length; i++) {
                const option = document.createElement('label');
                option.className = 'option';

                const radio = document.createElement('input');
                radio.type = 'radio';
                radio.name = 'quiz';
                radio.value = shuffledOptions[i];

                const optionText = document.createTextNode(shuffledOptions[i]);

                option.appendChild(radio);
                option.appendChild(optionText);
                optionsElement.appendChild(option);
            }

            quizContainer.innerHTML = '';
            quizContainer.appendChild(questionElement);
            quizContainer.appendChild(optionsElement);
        }

        function checkAnswer() {
            const selectedOption = document.querySelector('input[name="quiz"]:checked');
            if (selectedOption) {
                const answer = selectedOption.value;
                if (answer === quizData[currentQuestion].answer) {
                    score++;
                } else {
                    incorrectAnswers.push({
                        question: quizData[currentQuestion].question,
                        incorrectAnswer: answer,
                        correctAnswer: quizData[currentQuestion].answer,
                    });
                }
                currentQuestion++;
                selectedOption.checked = false;
                if (currentQuestion < quizData.length) {
                    displayQuestion();
                } else {
                    displayResult();
                }
            }
        }

        function displayResult() {
            quizContainer.style.display = 'none';
            submitButton.style.display = 'none';
            retryButton.style.display = 'inline-block';
            showAnswerButton.style.display = 'inline-block';
            resultContainer.innerHTML = `You scored ${score} out of ${quizData.length}!`;
        }

        function retryQuiz() {
            currentQuestion = 0;
            score = 0;
            incorrectAnswers = [];
            quizContainer.style.display = 'block';
            submitButton.style.display = 'inline-block';
            retryButton.style.display = 'none';
            showAnswerButton.style.display = 'none';
            resultContainer.innerHTML = '';
            displayQuestion();
        }

        function showAnswer() {
            quizContainer.style.display = 'none';
            submitButton.style.display = 'none';
            retryButton.style.display = 'inline-block';
            showAnswerButton.style.display = 'none';

            let incorrectAnswersHtml = '';
            for (let i = 0; i < incorrectAnswers.length; i++) {
                incorrectAnswersHtml += `
                    <p>
                        <strong>Question:</strong> ${incorrectAnswers[i].question}<br>
                        <strong>Your Answer:</strong> ${incorrectAnswers[i].incorrectAnswer}<br>
                        <strong>Correct Answer:</strong> ${incorrectAnswers[i].correctAnswer}
                    </p>
                `;
            }

            resultContainer.innerHTML = `
                <p>You scored ${score} out of ${quizData.length}!</p>
                <p>Incorrect Answers:</p>
                ${incorrectAnswersHtml}
            `;
        }

        submitButton.addEventListener('click', checkAnswer);
        retryButton.addEventListener('click', retryQuiz);
        showAnswerButton.addEventListener('click', showAnswer);

        displayQuestion();
    </script>
</body>
</html>
